#define ERIS_DEBUG 1
#include "creativity/belief/Demand.hpp"
#include <eris/Simulation.hpp>

using namespace eris;
using namespace creativity::belief;
using namespace Eigen;

int main() {
    VectorXd beta(10); beta << 11.65893180473674, -3.414526450496723, 0.03908214623322337, 3.417886482428777, -0.1044887772905825, -0.5317260002936961, -1.309861900724504, 12.02395223065594, -0.3650204259103447, 0.1830194222203563;
    MatrixXd V(10,10); V <<
    0.9329387334399702, -0.2256640797766128, 0.02913403921866605, -0.04487964798389196, 0.00273633399195803, -0.004258384102929667, 0.004774633540610216, -0.1310060033633397, -0.04408850419378704, -0.008179024374920055,
    -0.2256640797766691, 0.4093337986454449, -0.05542161236400658, -0.03372598708350936, 0.001481707374659914, 0.0007445144229373922, -0.04820917384962185, -0.1055134395735905, -0.1201506402031164, -0.005089048033510701,
    0.02913403921867458, -0.05542161236400666, 0.00837099630877219, 0.002548070049874739, 3.361586682008037e-05, 6.418201028328963e-05, 0.009848932358871494, 0.01355931331517384, 0.01557472590350561, 0.0005200491797196139,
    -0.04487964798390314, -0.03372598708351073, 0.002548070049875011, 0.08686845088249691, -0.008027928323677149, 0.004530250765052044, -0.04753719180963447, -0.03082233601816823, -0.01405731196573867, -0.0004365360508314637,
    0.002736333991959489, 0.00148170737465989, 3.361586682007733e-05, -0.0080279283236772, 0.0008200665874803652, -0.0003457459941952369, 0.005199861960015168, 0.00183344125638774, 0.0009028927355719154, 8.228120535859052e-05,
    -0.004258384102930504, 0.0007445144229375122, 6.41820102832786e-05, 0.004530250765051999, -0.0003457459941952304, 0.002412640825706666, -0.02345038511439161, -0.005620053908622346, 0.001361669805691335, -0.0002075969154654425,
    0.004774633540628473, -0.04820917384962655, 0.009848932358872136, -0.0475371918096354, 0.005199861960015231, -0.02345038511439167, 0.5802175659425655, 0.08200200259089571, -0.0772273690502672, 0.0002762932822461307,
    -0.131006003363319, -0.1055134395736026, 0.01355931331517567, -0.03082233601817186, 0.001833441256388119, -0.005620053908622527, 0.08200200259089831, 0.5414315307017584, 0.4355957069321356, -0.002803682947949227,
    -0.04408850419376487, -0.120150640203123, 0.0155747259035066, -0.01405731196574134, 0.0009028927355721571, 0.001361669805691226, -0.07722736905026636, 0.4355957069321335, 0.6283490298713273, -0.005375341426970444,
    -0.008179024374918407, -0.005089048033511699, 0.0005200491797197594, -0.0004365360508316455, 8.228120535860999e-05, -0.0002075969154654535, 0.0002762932822462956, -0.00280368294794924, -0.005375341426970272, 0.0006015698772950013;
    double n = 19;
    double s2 = 125.707342330469;
    struct { double q = 8.281213838913192, c = 1; unsigned long lifesales = 22, otherbooks = 0, marketbooks = 44; } book;

    Demand d(2, beta, s2, V, n);

    auto pred = d.argmaxP(book.q, book.lifesales, book.otherbooks, book.marketbooks, book.c);
    const double &p = pred.first, &q = pred.second;
    ERIS_DBGVAR(p);
    ERIS_DBGVAR(q);
    ERIS_DBGVAR(d.draw_discards);
    ERIS_DBGVAR(d.draw_success_cumulative);
    ERIS_DBGVAR(d.draw_discards_cumulative);

    Demand d2 = std::move(d).weaken(0.999);
    auto pred2 = d2.argmaxP(book.q, book.lifesales, book.otherbooks, book.marketbooks, book.c);
    const double &p2 = pred2.first, &q2 = pred2.second;
    ERIS_DBGVAR(p2);
    ERIS_DBGVAR(q2);
    ERIS_DBGVAR(d2.draw_discards);
    ERIS_DBGVAR(d2.draw_success_cumulative);
    ERIS_DBGVAR(d2.draw_discards_cumulative);
}
